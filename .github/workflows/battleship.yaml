name: Battleship Docker Image CI

env:
  AZURE_WEBAPP_NAME: battleship
  Name: Azure


# Triggers - what will cause this workflow/pipeline to run
on:
  push:
    branches:
      - main

    paths:
      - Battleship.API/**
  pull_request:
    branches: 
      - main

    paths:
      - Battleship.API/**
  workflow_dispatch: # a manual trigger, so I get a button to press to start the pipeline if I want to!

jobs: # the job is the set of tasks that will be hosted and run on the same agent
  build: #the name of the job
    runs-on: ubuntu-latest #specifies the type/OS of the build agent 
    # githubs agents are a blank slate with every workflow
    # private build agent can speed up the workflow by already having dependencies installd
    permissions:
      # pull-requests: write
      # issues: write
      # repository-projects: write
      pull-requests: write
      contents: write
      statuses: write
      checks: write
      actions: write

    steps: # what processess/steps will the JOB need to do?
    # Step 1: clone the repo
    - name: Checkout
      uses: actions/checkout@v4

    # Step 2: install docker to run out build
    - name: Docker Setup Buildx
    # uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5
      uses: docker/setup-buildx-action@v3.8.0

    # Step 3. Run xUnit tests
    # - name: Test
    #   run: dotnet test --logger "trx;LogFileName=test-results.trx" || true


    # Step 4. Test Report generation
    # - name: Test Report
    #   uses: dorny/test-reporter@v1
    #   if: always()
    #   with:
    #     name: DotNET Tests
    #     path: "**/test-results.trx"
    #     reporter: dotnet-trx
    #     fail-on-error: true

    # Step 3. Run xUnit tests
    - name: Test
      run: dotnet test --configuration Release --verbosity normal --logger trx --collect:"XPlat Code Coverage"

    - name: ReportGenerator
      uses: danielpalme/ReportGenerator-GitHub-Action@5.4.3
      with:
        reports: "**/*.cobertura.xml" # REQUIRED # The coverage reports that should be parsed (separated by semicolon). Globbing is supported.
        targetdir: 'coveragereport' # REQUIRED # The directory where the generated report should be saved.
        reporttypes: 'HtmlInline;Cobertura' # The output formats and scope (separated by semicolon) Values: Badges, Clover, Cobertura, OpenCover, CsvSummary, Html, Html_Dark, Html_Light, Html_BlueRed, HtmlChart, HtmlInline, HtmlInline_AzurePipelines, HtmlInline_AzurePipelines_Dark, HtmlInline_AzurePipelines_Light, HtmlSummary, Html_BlueRed_Summary, JsonSummary, CodeClimate, Latex, LatexSummary, lcov, MarkdownSummary, MarkdownAssembliesSummary, MarkdownSummaryGithub, MarkdownDeltaSummary, MHtml, SvgChart, SonarQube, TeamCitySummary, TextSummary, TextDeltaSummary, Xml, XmlSummary
        sourcedirs: '' # Optional directories which contain the corresponding source code (separated by semicolon). The source directories are used if coverage report contains classes without path information.
        historydir: '' # Optional directory for storing persistent coverage information. Can be used in future reports to show coverage evolution.
        plugins: '' # Optional plugin files for custom reports or custom history storage (separated by semicolon).
        assemblyfilters: '+*' # Optional list of assemblies that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
        classfilters: '+Battleship.API.Service.*' # Optional list of classes that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
        filefilters: '+*' # Optional list of files that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
        riskhotspotassemblyfilters: '+*' # Optional list of assemblies that should be included or excluded in the risk hotspots. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
        riskhotspotclassfilters: '+*' # Optional list of classes that should be included or excluded in the risk hotspots. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
        verbosity: 'Info' # The verbosity level of the log messages. Values: Verbose, Info, Warning, Error, Off
        title: '' # Optional title.
        tag: '${{ github.run_number }}_${{ github.run_id }}' # Optional tag or build version.
        license: '' # Optional license for PRO version. Get your license here: https://reportgenerator.io/pro
        customSettings: '' # Optional custom settings (separated by semicolon). See: https://github.com/danielpalme/ReportGenerator/wiki/Settings.
        toolpath: 'reportgeneratortool' # Default directory for installing the dotnet tool.

    - name: Upload coverage report artifact
      uses: actions/upload-artifact@v4
      with:
        name: CoverageReport # Artifact name        
        path: coveragereport # Directory containing files to upload

    # Step 5: login to docker
    # - name: Docker Login
    #   uses: docker/login-action@v3.3.0
    #   with:
    #     username: ${{ secrets.DOCKERHUB_USERNAME }}
    #     # Password or personal access token used to log against the Docker registry
    #     password: ${{ secrets.DOCKERHUB_TOKEN }}

    # # Step 6: build and push a docker image
    # - name: Build and push Docker images
    #   uses: docker/build-push-action@v6.11.0
    #   with:
    #     context: ./Battleship.API/
    #     file: ./Battleship.API/Dockerfile
    #     push: true
    #     tags: index.docker.io/gvamsius/battleship:latest, index.docker.io/gvamsius/battleship:${{ github.sha }}

    # # Step 7: deploy the image to Azure
    # - name: Deploy to Azure Web App
    #   id: deploy-to-webapp
    #   uses: azure/webapps-deploy@v2
    #   with:
    #     app-name: ${{ env.AZURE_WEBAPP_NAME }}
    #     publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
    #     images: index.docker.io/gvamsius/battleship:${{ github.sha }}
